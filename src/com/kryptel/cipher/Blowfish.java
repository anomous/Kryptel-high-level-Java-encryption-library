/*******************************************************************************

  Product:       Kryptel/Java
  File:          Blowfish.java
  Description:   https://www.kryptel.com/articles/developers/java/cipher.php

  Copyright (c) 2017 Inv Softworks LLC,    http://www.kryptel.com

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

*******************************************************************************/


package com.kryptel.cipher;


import static com.kryptel.Guids.CID_CIPHER_BLOWFISH;
import static com.kryptel.bslx.Conversions.FromBytes;
import static com.kryptel.bslx.Conversions.ToBytes;

import java.util.UUID;


final class Blowfish extends BlockCipherBase {
	Blowfish(long capabilities) {
		super(capabilities);

  	DEFAULT_KEY_SIZE = BLOWFISH_KEY_SIZE;
  	DEFAULT_BLOCK_SIZE = 8;
  	DEFAULT_ROUNDS = 16;
  	DEFAULT_SCHEME = 1;

  	cipherInfo = new CipherInfo(
  			new int[] { BLOWFISH_KEY_SIZE },			// Key sizes
  			new int[] { DEFAULT_BLOCK_SIZE },			// Block sizes
  			new int[] { DEFAULT_ROUNDS },					// Rounds
  			new String[] { "Standard" });

		cipherKeySize = DEFAULT_KEY_SIZE;
	  cipherBlockSize = DEFAULT_BLOCK_SIZE;
	  cipherRounds = DEFAULT_ROUNDS;
	  cipherScheme = DEFAULT_SCHEME;
	}

	//
	// IKryptelComponent
	//

	public UUID ComponentID() { return componentID; }
	public String ComponentName() { return "Blowfish"; }

	
  //
  // Private data and methods
  //

  static UUID componentID = CID_CIPHER_BLOWFISH;

	private static final int BLOWFISH_KEY_SIZE = 576 / 8;

  
  private int[] PiDigits = {
    0x0243F6A88, 0x085A308D3, 0x013198A2E, 0x003707344, 0x0A4093822, 0x0299F31D0, 0x0082EFA98, 0x0EC4E6C89,
    0x0452821E6, 0x038D01377, 0x0BE5466CF, 0x034E90C6C, 0x0C0AC29B7, 0x0C97C50DD, 0x03F84D5B5, 0x0B5470917,
    0x09216D5D9, 0x08979FB1B, 0x0D1310BA6, 0x098DFB5AC, 0x02FFD72DB, 0x0D01ADFB7, 0x0B8E1AFED, 0x06A267E96,
    0x0BA7C9045, 0x0F12C7F99, 0x024A19947, 0x0B3916CF7, 0x00801F2E2, 0x0858EFC16, 0x0636920D8, 0x071574E69,
    0x0A458FEA3, 0x0F4933D7E, 0x00D95748F, 0x0728EB658, 0x0718BCD58, 0x082154AEE, 0x07B54A41D, 0x0C25A59B5,
    0x09C30D539, 0x02AF26013, 0x0C5D1B023, 0x0286085F0, 0x0CA417918, 0x0B8DB38EF, 0x08E79DCB0, 0x0603A180E,
    0x06C9E0E8B, 0x0B01E8A3E, 0x0D71577C1, 0x0BD314B27, 0x078AF2FDA, 0x055605C60, 0x0E65525F3, 0x0AA55AB94,
    0x057489862, 0x063E81440, 0x055CA396A, 0x02AAB10B6, 0x0B4CC5C34, 0x01141E8CE, 0x0A15486AF, 0x07C72E993,
    0x0B3EE1411, 0x0636FBC2A, 0x02BA9C55D, 0x0741831F6, 0x0CE5C3E16, 0x09B87931E, 0x0AFD6BA33, 0x06C24CF5C,
    0x07A325381, 0x028958677, 0x03B8F4898, 0x06B4BB9AF, 0x0C4BFE81B, 0x066282193, 0x061D809CC, 0x0FB21A991,
    0x0487CAC60, 0x05DEC8032, 0x0EF845D5D, 0x0E98575B1, 0x0DC262302, 0x0EB651B88, 0x023893E81, 0x0D396ACC5,
    0x00F6D6FF3, 0x083F44239, 0x02E0B4482, 0x0A4842004, 0x069C8F04A, 0x09E1F9B5E, 0x021C66842, 0x0F6E96C9A,
    0x0670C9C61, 0x0ABD388F0, 0x06A51A0D2, 0x0D8542F68, 0x0960FA728, 0x0AB5133A3, 0x06EEF0B6C, 0x0137A3BE4,
    0x0BA3BF050, 0x07EFB2A98, 0x0A1F1651D, 0x039AF0176, 0x066CA593E, 0x082430E88, 0x08CEE8619, 0x0456F9FB4,
    0x07D84A5C3, 0x03B8B5EBE, 0x0E06F75D8, 0x085C12073, 0x0401A449F, 0x056C16AA6, 0x04ED3AA62, 0x0363F7706,
    0x01BFEDF72, 0x0429B023D, 0x037D0D724, 0x0D00A1248, 0x0DB0FEAD3, 0x049F1C09B, 0x0075372C9, 0x080991B7B,
    0x025D479D8, 0x0F6E8DEF7, 0x0E3FE501A, 0x0B6794C3B, 0x0976CE0BD, 0x004C006BA, 0x0C1A94FB6, 0x0409F60C4,
    0x05E5C9EC2, 0x0196A2463, 0x068FB6FAF, 0x03E6C53B5, 0x01339B2EB, 0x03B52EC6F, 0x06DFC511F, 0x09B30952C,
    0x0CC814544, 0x0AF5EBD09, 0x0BEE3D004, 0x0DE334AFD, 0x0660F2807, 0x0192E4BB3, 0x0C0CBA857, 0x045C8740F,
    0x0D20B5F39, 0x0B9D3FBDB, 0x05579C0BD, 0x01A60320A, 0x0D6A100C6, 0x0402C7279, 0x0679F25FE, 0x0FB1FA3CC,
    0x08EA5E9F8, 0x0DB3222F8, 0x03C7516DF, 0x0FD616B15, 0x02F501EC8, 0x0AD0552AB, 0x0323DB5FA, 0x0FD238760,
    0x053317B48, 0x03E00DF82, 0x09E5C57BB, 0x0CA6F8CA0, 0x01A87562E, 0x0DF1769DB, 0x0D542A8F6, 0x0287EFFC3,
    0x0AC6732C6, 0x08C4F5573, 0x0695B27B0, 0x0BBCA58C8, 0x0E1FFA35D, 0x0B8F011A0, 0x010FA3D98, 0x0FD2183B8,
    0x04AFCB56C, 0x02DD1D35B, 0x09A53E479, 0x0B6F84565, 0x0D28E49BC, 0x04BFB9790, 0x0E1DDF2DA, 0x0A4CB7E33,
    0x062FB1341, 0x0CEE4C6E8, 0x0EF20CADA, 0x036774C01, 0x0D07E9EFE, 0x02BF11FB4, 0x095DBDA4D, 0x0AE909198,
    0x0EAAD8E71, 0x06B93D5A0, 0x0D08ED1D0, 0x0AFC725E0, 0x08E3C5B2F, 0x08E7594B7, 0x08FF6E2FB, 0x0F2122B64,
    0x08888B812, 0x0900DF01C, 0x04FAD5EA0, 0x0688FC31C, 0x0D1CFF191, 0x0B3A8C1AD, 0x02F2F2218, 0x0BE0E1777,
    0x0EA752DFE, 0x08B021FA1, 0x0E5A0CC0F, 0x0B56F74E8, 0x018ACF3D6, 0x0CE89E299, 0x0B4A84FE0, 0x0FD13E0B7,
    0x07CC43B81, 0x0D2ADA8D9, 0x0165FA266, 0x080957705, 0x093CC7314, 0x0211A1477, 0x0E6AD2065, 0x077B5FA86,
    0x0C75442F5, 0x0FB9D35CF, 0x0EBCDAF0C, 0x07B3E89A0, 0x0D6411BD3, 0x0AE1E7E49, 0x000250E2D, 0x02071B35E,
    0x0226800BB, 0x057B8E0AF, 0x02464369B, 0x0F009B91E, 0x05563911D, 0x059DFA6AA, 0x078C14389, 0x0D95A537F,
    0x0207D5BA2, 0x002E5B9C5, 0x083260376, 0x06295CFA9, 0x011C81968, 0x04E734A41, 0x0B3472DCA, 0x07B14A94A,
    0x01B510052, 0x09A532915, 0x0D60F573F, 0x0BC9BC6E4, 0x02B60A476, 0x081E67400, 0x008BA6FB5, 0x0571BE91F,
    0x0F296EC6B, 0x02A0DD915, 0x0B6636521, 0x0E7B9F9B6, 0x0FF34052E, 0x0C5855664, 0x053B02D5D, 0x0A99F8FA1,
    0x008BA4799, 0x06E85076A, 0x04B7A70E9, 0x0B5B32944, 0x0DB75092E, 0x0C4192623, 0x0AD6EA6B0, 0x049A7DF7D,
    0x09CEE60B8, 0x08FEDB266, 0x0ECAA8C71, 0x0699A17FF, 0x05664526C, 0x0C2B19EE1, 0x0193602A5, 0x075094C29,
    0x0A0591340, 0x0E4183A3E, 0x03F54989A, 0x05B429D65, 0x06B8FE4D6, 0x099F73FD6, 0x0A1D29C07, 0x0EFE830F5,
    0x04D2D38E6, 0x0F0255DC1, 0x04CDD2086, 0x08470EB26, 0x06382E9C6, 0x0021ECC5E, 0x009686B3F, 0x03EBAEFC9,
    0x03C971814, 0x06B6A70A1, 0x0687F3584, 0x052A0E286, 0x0B79C5305, 0x0AA500737, 0x03E07841C, 0x07FDEAE5C,
    0x08E7D44EC, 0x05716F2B8, 0x0B03ADA37, 0x0F0500C0D, 0x0F01C1F04, 0x00200B3FF, 0x0AE0CF51A, 0x03CB574B2,
    0x025837A58, 0x0DC0921BD, 0x0D19113F9, 0x07CA92FF6, 0x094324773, 0x022F54701, 0x03AE5E581, 0x037C2DADC,
    0x0C8B57634, 0x09AF3DDA7, 0x0A9446146, 0x00FD0030E, 0x0ECC8C73E, 0x0A4751E41, 0x0E238CD99, 0x03BEA0E2F,
    0x03280BBA1, 0x0183EB331, 0x04E548B38, 0x04F6DB908, 0x06F420D03, 0x0F60A04BF, 0x02CB81290, 0x024977C79,
    0x05679B072, 0x0BCAF89AF, 0x0DE9A771F, 0x0D9930810, 0x0B38BAE12, 0x0DCCF3F2E, 0x05512721F, 0x02E6B7124,
    0x0501ADDE6, 0x09F84CD87, 0x07A584718, 0x07408DA17, 0x0BC9F9ABC, 0x0E94B7D8C, 0x0EC7AEC3A, 0x0DB851DFA,
    0x063094366, 0x0C464C3D2, 0x0EF1C1847, 0x03215D908, 0x0DD433B37, 0x024C2BA16, 0x012A14D43, 0x02A65C451,
    0x050940002, 0x0133AE4DD, 0x071DFF89E, 0x010314E55, 0x081AC77D6, 0x05F11199B, 0x0043556F1, 0x0D7A3C76B,
    0x03C11183B, 0x05924A509, 0x0F28FE6ED, 0x097F1FBFA, 0x09EBABF2C, 0x01E153C6E, 0x086E34570, 0x0EAE96FB1,
    0x0860E5E0A, 0x05A3E2AB3, 0x0771FE71C, 0x04E3D06FA, 0x02965DCB9, 0x099E71D0F, 0x0803E89D6, 0x05266C825,
    0x02E4CC978, 0x09C10B36A, 0x0C6150EBA, 0x094E2EA78, 0x0A5FC3C53, 0x01E0A2DF4, 0x0F2F74EA7, 0x0361D2B3D,
    0x01939260F, 0x019C27960, 0x05223A708, 0x0F71312B6, 0x0EBADFE6E, 0x0EAC31F66, 0x0E3BC4595, 0x0A67BC883,
    0x0B17F37D1, 0x0018CFF28, 0x0C332DDEF, 0x0BE6C5AA5, 0x065582185, 0x068AB9802, 0x0EECEA50F, 0x0DB2F953B,
    0x02AEF7DAD, 0x05B6E2F84, 0x01521B628, 0x029076170, 0x0ECDD4775, 0x0619F1510, 0x013CCA830, 0x0EB61BD96,
    0x00334FE1E, 0x0AA0363CF, 0x0B5735C90, 0x04C70A239, 0x0D59E9E0B, 0x0CBAADE14, 0x0EECC86BC, 0x060622CA7,
    0x09CAB5CAB, 0x0B2F3846E, 0x0648B1EAF, 0x019BDF0CA, 0x0A02369B9, 0x0655ABB50, 0x040685A32, 0x03C2AB4B3,
    0x0319EE9D5, 0x0C021B8F7, 0x09B540B19, 0x0875FA099, 0x095F7997E, 0x0623D7DA8, 0x0F837889A, 0x097E32D77,
    0x011ED935F, 0x016681281, 0x00E358829, 0x0C7E61FD6, 0x096DEDFA1, 0x07858BA99, 0x057F584A5, 0x01B227263,
    0x09B83C3FF, 0x01AC24696, 0x0CDB30AEB, 0x0532E3054, 0x08FD948E4, 0x06DBC3128, 0x058EBF2EF, 0x034C6FFEA,
    0x0FE28ED61, 0x0EE7C3C73, 0x05D4A14D9, 0x0E864B7E3, 0x042105D14, 0x0203E13E0, 0x045EEE2B6, 0x0A3AAABEA,
    0x0DB6C4F15, 0x0FACB4FD0, 0x0C742F442, 0x0EF6ABBB5, 0x0654F3B1D, 0x041CD2105, 0x0D81E799E, 0x086854DC7,
    0x0E44B476A, 0x03D816250, 0x0CF62A1F2, 0x05B8D2646, 0x0FC8883A0, 0x0C1C7B6A3, 0x07F1524C3, 0x069CB7492,
    0x047848A0B, 0x05692B285, 0x0095BBF00, 0x0AD19489D, 0x01462B174, 0x023820E00, 0x058428D2A, 0x00C55F5EA,
    0x01DADF43E, 0x0233F7061, 0x03372F092, 0x08D937E41, 0x0D65FECF1, 0x06C223BDB, 0x07CDE3759, 0x0CBEE7460,
    0x04085F2A7, 0x0CE77326E, 0x0A6078084, 0x019F8509E, 0x0E8EFD855, 0x061D99735, 0x0A969A7AA, 0x0C50C06C2,
    0x05A04ABFC, 0x0800BCADC, 0x09E447A2E, 0x0C3453484, 0x0FDD56705, 0x00E1E9EC9, 0x0DB73DBD3, 0x0105588CD,
    0x0675FDA79, 0x0E3674340, 0x0C5C43465, 0x0713E38D8, 0x03D28F89E, 0x0F16DFF20, 0x0153E21E7, 0x08FB03D4A,
    0x0E6E39F2B, 0x0DB83ADF7, 0x0E93D5A68, 0x0948140F7, 0x0F64C261C, 0x094692934, 0x0411520F7, 0x07602D4F7,
    0x0BCF46B2E, 0x0D4A20068, 0x0D4082471, 0x03320F46A, 0x043B7D4B7, 0x0500061AF, 0x01E39F62E, 0x097244546,
    0x014214F74, 0x0BF8B8840, 0x04D95FC1D, 0x096B591AF, 0x070F4DDD3, 0x066A02F45, 0x0BFBC09EC, 0x003BD9785,
    0x07FAC6DD0, 0x031CB8504, 0x096EB27B3, 0x055FD3941, 0x0DA2547E6, 0x0ABCA0A9A, 0x028507825, 0x0530429F4,
    0x00A2C86DA, 0x0E9B66DFB, 0x068DC1462, 0x0D7486900, 0x0680EC0A4, 0x027A18DEE, 0x04F3FFEA2, 0x0E887AD8C,
    0x0B58CE006, 0x07AF4D6B6, 0x0AACE1E7C, 0x0D3375FEC, 0x0CE78A399, 0x0406B2A42, 0x020FE9E35, 0x0D9F385B9,
    0x0EE39D7AB, 0x03B124E8B, 0x01DC9FAF7, 0x04B6D1856, 0x026A36631, 0x0EAE397B2, 0x03A6EFA74, 0x0DD5B4332,
    0x06841E7F7, 0x0CA7820FB, 0x0FB0AF54E, 0x0D8FEB397, 0x0454056AC, 0x0BA489527, 0x055533A3A, 0x020838D87,
    0x0FE6BA9B7, 0x0D096954B, 0x055A867BC, 0x0A1159A58, 0x0CCA92963, 0x099E1DB33, 0x0A62A4A56, 0x03F3125F9,
    0x05EF47E1C, 0x09029317C, 0x0FDF8E802, 0x004272F70, 0x080BB155C, 0x005282CE3, 0x095C11548, 0x0E4C66D22,
    0x048C1133F, 0x0C70F86DC, 0x007F9C9EE, 0x041041F0F, 0x0404779A4, 0x05D886E17, 0x0325F51EB, 0x0D59BC0D1,
    0x0F2BCC18F, 0x041113564, 0x0257B7834, 0x0602A9C60, 0x0DFF8E8A3, 0x01F636C1B, 0x00E12B4C2, 0x002E1329E,
    0x0AF664FD1, 0x0CAD18115, 0x06B2395E0, 0x0333E92E1, 0x03B240B62, 0x0EEBEB922, 0x085B2A20E, 0x0E6BA0D99,
    0x0DE720C8C, 0x02DA2F728, 0x0D0127845, 0x095B794FD, 0x0647D0862, 0x0E7CCF5F0, 0x05449A36F, 0x0877D48FA,
    0x0C39DFD27, 0x0F33E8D1E, 0x00A476341, 0x0992EFF74, 0x03A6F6EAB, 0x0F4F8FD37, 0x0A812DC60, 0x0A1EBDDF8,
    0x0991BE14C, 0x0DB6E6B0D, 0x0C67B5510, 0x06D672C37, 0x02765D43B, 0x0DCD0E804, 0x0F1290DC7, 0x0CC00FFA3,
    0x0B5390F92, 0x0690FED0B, 0x0667B9FFB, 0x0CEDB7D9C, 0x0A091CF0B, 0x0D9155EA3, 0x0BB132F88, 0x0515BAD24,
    0x07B9479BF, 0x0763BD6EB, 0x037392EB3, 0x0CC115979, 0x08026E297, 0x0F42E312D, 0x06842ADA7, 0x0C66A2B3B,
    0x012754CCC, 0x0782EF11C, 0x06A124237, 0x0B79251E7, 0x006A1BBE6, 0x04BFB6350, 0x01A6B1018, 0x011CAEDFA,
    0x03D25BDD8, 0x0E2E1C3C9, 0x044421659, 0x00A121386, 0x0D90CEC6E, 0x0D5ABEA2A, 0x064AF674E, 0x0DA86A85F,
    0x0BEBFE988, 0x064E4C3FE, 0x09DBC8057, 0x0F0F7C086, 0x060787BF8, 0x06003604D, 0x0D1FD8346, 0x0F6381FB0,
    0x07745AE04, 0x0D736FCCC, 0x083426B33, 0x0F01EAB71, 0x0B0804187, 0x03C005E5F, 0x077A057BE, 0x0BDE8AE24,
    0x055464299, 0x0BF582E61, 0x04E58F48F, 0x0F2DDFDA2, 0x0F474EF38, 0x08789BDC2, 0x05366F9C3, 0x0C8B38E74,
    0x0B475F255, 0x046FCD9B9, 0x07AEB2661, 0x08B1DDF84, 0x0846A0E79, 0x0915F95E2, 0x0466E598E, 0x020B45770,
    0x08CD55591, 0x0C902DE4C, 0x0B90BACE1, 0x0BB8205D0, 0x011A86248, 0x07574A99E, 0x0B77F19B6, 0x0E0A9DC09,
    0x0662D09A1, 0x0C4324633, 0x0E85A1F02, 0x009F0BE8C, 0x04A99A025, 0x01D6EFE10, 0x01AB93D1D, 0x00BA5A4DF,
    0x0A186F20F, 0x02868F169, 0x0DCB7DA83, 0x0573906FE, 0x0A1E2CE9B, 0x04FCD7F52, 0x050115E01, 0x0A70683FA,
    0x0A002B5C4, 0x00DE6D027, 0x09AF88C27, 0x0773F8641, 0x0C3604C06, 0x061A806B5, 0x0F0177A28, 0x0C0F586E0,
    0x0006058AA, 0x030DC7D62, 0x011E69ED7, 0x02338EA63, 0x053C2DD94, 0x0C2C21634, 0x0BBCBEE56, 0x090BCB6DE,
    0x0EBFC7DA1, 0x0CE591D76, 0x06F05E409, 0x04B7C0188, 0x039720A3D, 0x07C927C24, 0x086E3725F, 0x0724D9DB9,
    0x01AC15BB4, 0x0D39EB8FC, 0x0ED545578, 0x008FCA5B5, 0x0D83D7CD3, 0x04DAD0FC4, 0x01E50EF5E, 0x0B161E6F8,
    0x0A28514D9, 0x06C51133C, 0x06FD5C7E7, 0x056E14EC4, 0x0362ABFCE, 0x0DDC6C837, 0x0D79A3234, 0x092638212,
    0x0670EFA8E, 0x0406000E0, 0x03A39CE37, 0x0D3FAF5CF, 0x0ABC27737, 0x05AC52D1B, 0x05CB0679E, 0x04FA33742,
    0x0D3822740, 0x099BC9BBE, 0x0D5118E9D, 0x0BF0F7315, 0x0D62D1C7E, 0x0C700C47B, 0x0B78C1B6B, 0x021A19045,
    0x0B26EB1BE, 0x06A366EB4, 0x05748AB2F, 0x0BC946E79, 0x0C6A376D2, 0x06549C2C8, 0x0530FF8EE, 0x0468DDE7D,
    0x0D5730A1D, 0x04CD04DC6, 0x02939BBDB, 0x0A9BA4650, 0x0AC9526E8, 0x0BE5EE304, 0x0A1FAD5F0, 0x06A2D519A,
    0x063EF8CE2, 0x09A86EE22, 0x0C089C2B8, 0x043242EF6, 0x0A51E03AA, 0x09CF2D0A4, 0x083C061BA, 0x09BE96A4D,
    0x08FE51550, 0x0BA645BD6, 0x02826A2F9, 0x0A73A3AE1, 0x04BA99586, 0x0EF5562E9, 0x0C72FEFD3, 0x0F752F7DA,
    0x03F046F69, 0x077FA0A59, 0x080E4A915, 0x087B08601, 0x09B09E6AD, 0x03B3EE593, 0x0E990FD5A, 0x09E34D797,
    0x02CF0B7D9, 0x0022B8B51, 0x096D5AC3A, 0x0017DA67D, 0x0D1CF3ED6, 0x07C7D2D28, 0x01F9F25CF, 0x0ADF2B89B,
    0x05AD6B472, 0x05A88F54C, 0x0E029AC71, 0x0E019A5E6, 0x047B0ACFD, 0x0ED93FA9B, 0x0E8D3C48D, 0x0283B57CC,
    0x0F8D56629, 0x079132E28, 0x0785F0191, 0x0ED756055, 0x0F7960E44, 0x0E3D35E8C, 0x015056DD4, 0x088F46DBA,
    0x003A16125, 0x00564F0BD, 0x0C3EB9E15, 0x03C9057A2, 0x097271AEC, 0x0A93A072A, 0x01B3F6D9B, 0x01E6321F5,
    0x0F59C66FB, 0x026DCF319, 0x07533D928, 0x0B155FDF5, 0x003563482, 0x08ABA3CBB, 0x028517711, 0x0C20AD9F8,
    0x0ABCC5167, 0x0CCAD925F, 0x04DE81751, 0x03830DC8E, 0x0379D5862, 0x09320F991, 0x0EA7A90C2, 0x0FB3E7BCE,
    0x05121CE64, 0x0774FBE32, 0x0A8B6E37E, 0x0C3293D46, 0x048DE5369, 0x06413E680, 0x0A2AE0810, 0x0DD6DB224,
    0x069852DFD, 0x009072166, 0x0B39A460A, 0x06445C0DD, 0x0586CDECF, 0x01C20C8AE, 0x05BBEF7DD, 0x01B588D40,
    0x0CCD2017F, 0x06BB4E3BB, 0x0DDA26A7E, 0x03A59FF45, 0x03E350A44, 0x0BCB4CDD5, 0x072EACEA8, 0x0FA6484BB,
    0x08D6612AE, 0x0BF3C6F47, 0x0D29BE463, 0x0542F5D9E, 0x0AEC2771B, 0x0F64E6370, 0x0740E0D8D, 0x0E75B1357,
    0x0F8721671, 0x0AF537D5D, 0x04040CB08, 0x04EB4E2CC, 0x034D2466A, 0x00115AF84, 0x0E1B00428, 0x095983A1D,
    0x006B89FB4, 0x0CE6EA048, 0x06F3F3B82, 0x03520AB82, 0x0011A1D4B, 0x0277227F8, 0x0611560B1, 0x0E7933FDC,
    0x0BB3A792B, 0x0344525BD, 0x0A08839E1, 0x051CE794B, 0x02F32C9B7, 0x0A01FBAC9, 0x0E01CC87E, 0x0BCC7D1F6,
    0x0CF0111C3, 0x0A1E8AAC7, 0x01A908749, 0x0D44FBD9A, 0x0D0DADECB, 0x0D50ADA38, 0x00339C32A, 0x0C6913667,
    0x08DF9317C, 0x0E0B12B4F, 0x0F79E59B7, 0x043F5BB3A, 0x0F2D519FF, 0x027D9459C, 0x0BF97222C, 0x015E6FC2A,
    0x00F91FC71, 0x09B941525, 0x0FAE59361, 0x0CEB69CEB, 0x0C2A86459, 0x012BAA8D1, 0x0B6C1075E, 0x0E3056A0C,
    0x010D25065, 0x0CB03A442, 0x0E0EC6E0E, 0x01698DB3B, 0x04C98A0BE, 0x03278E964, 0x09F1F9532, 0x0E0D392DF,
    0x0D3A0342B, 0x08971F21E, 0x01B0A7441, 0x04BA3348C, 0x0C5BE7120, 0x0C37632D8, 0x0DF359F8D, 0x09B992F2E,
    0x0E60B6F47, 0x00FE3F11D, 0x0E54CDA54, 0x01EDAD891, 0x0CE6279CF, 0x0CD3E7E6F, 0x01618B166, 0x0FD2C1D05,
    0x0848FD2C5, 0x0F6FB2299, 0x0F523F357, 0x0A6327623, 0x093A83531, 0x056CCCD02, 0x0ACF08162, 0x05A75EBB5,
    0x06E163697, 0x088D273CC, 0x0DE966292, 0x081B949D0, 0x04C50901B, 0x071C65614, 0x0E6C6C7BD, 0x0327A140A,
    0x045E1D006, 0x0C3F27B9A, 0x0C9AA53FD, 0x062A80F00, 0x0BB25BFE2, 0x035BDD2F6, 0x071126905, 0x0B2040222,
    0x0B6CBCF7C, 0x0CD769C2B, 0x053113EC0, 0x01640E3D3, 0x038ABBD60, 0x02547ADF0, 0x0BA38209C, 0x0F746CE76,
    0x077AFA1C5, 0x020756060, 0x085CBFE4E, 0x08AE88DD8, 0x07AAAF9B0, 0x04CF9AA7E, 0x01948C25C, 0x002FB8A8C,
    0x001C36AE4, 0x0D6EBE1F9, 0x090D4F869, 0x0A65CDEA0, 0x03F09252D, 0x0C208E69F, 0x0B74E6132, 0x0CE77E25B,
    0x0578FDFE3, 0x03AC372E6 };

  // S-Boxes
  private int[] pArray = new int[18];
  private int[] sBoxes = new int[1024];

  private int[] temp = new int[1];
  
  
  private int Iterate(int xL, int xR, int n) {
    return xR ^ ((sBoxes[xL >>> 24] + sBoxes[((xL >>> 16) & 0xFF) + 256]) ^
            		sBoxes[((xL >>> 8) & 0xFF) + 512]) + sBoxes[(xL & 0xFF) + 768];
  }

	
	//
	// These methods actually implement the block cipher
	//

  protected void ExpandKey() {
    byte[] kb = new byte[72];
    int[] kd = new int[18];
    byte[] cb = { 0, 0, 0, 0, 0, 0, 0, 0 };

    for (int i = 0; i < 18; i++)
      for (int j = 0; j < 4; j++)
        kb[i * 4 + 3 - j] = cipherKey[BLOWFISH_KEY_SIZE - (i * 4 + j) % BLOWFISH_KEY_SIZE - 1];
    FromBytes(kd, 0, kb, 0, 72);
    for (int i = 0; i < 18; i++) pArray[i] = kd[i] ^ PiDigits[i];
    for (int i = 0; i < 1024; i++) sBoxes[i] = PiDigits[i + 18];

    for (int i = 0; i < 9; i++) {
      EncryptBasicBlock(cb, 0, cb, 0);
      FromBytes(pArray, i * 2 * 4, cb, 4, 4);
      FromBytes(pArray, (i * 2 + 1) * 4, cb, 0, 4);
    }

    for (int i = 0; i < 512; i++) {
      EncryptBasicBlock(cb, 0, cb, 0);
      FromBytes(sBoxes, i * 2 * 4, cb, 4, 4);
      FromBytes(sBoxes, (i * 2 + 1) * 4, cb, 0, 4);
    }
	}
	
  protected void EncryptBasicBlock(byte[] dst, int to, byte[] src, int from) {
    int xl, xr;

    FromBytes(temp, 0, src, from, 4);
    xr = temp[0];
    FromBytes(temp, 0, src, from + 4, 4);
    xl = temp[0];
    
    xl ^= pArray[0]; xr = Iterate(xl, xr, 0);
    xr ^= pArray[1]; xl = Iterate(xr, xl, 1);
    xl ^= pArray[2]; xr = Iterate(xl, xr, 2);
    xr ^= pArray[3]; xl = Iterate(xr, xl, 3);
    xl ^= pArray[4]; xr = Iterate(xl, xr, 4);
    xr ^= pArray[5]; xl = Iterate(xr, xl, 5);
    xl ^= pArray[6]; xr = Iterate(xl, xr, 6);
    xr ^= pArray[7]; xl = Iterate(xr, xl, 7);
    xl ^= pArray[8]; xr = Iterate(xl, xr, 8);
    xr ^= pArray[9]; xl = Iterate(xr, xl, 9);
    xl ^= pArray[10]; xr = Iterate(xl, xr, 10);
    xr ^= pArray[11]; xl = Iterate(xr, xl, 11);
    xl ^= pArray[12]; xr = Iterate(xl, xr, 12);
    xr ^= pArray[13]; xl = Iterate(xr, xl, 13);
    xl ^= pArray[14]; xr = Iterate(xl, xr, 14);
    xr ^= pArray[15]; xl = Iterate(xr, xl, 15);

    xl ^= pArray[16];
    xr ^= pArray[17];

    temp[0] = xl;
    ToBytes(dst, to, temp, 0, 4);
    temp[0] = xr;
    ToBytes(dst, to + 4, temp, 0, 4);
	}
	
  protected void DecryptBasicBlock(byte[] dst, int to, byte[] src, int from) {
    int xl, xr;

    FromBytes(temp, 0, src, from, 4);
    xr = temp[0];
    FromBytes(temp, 0, src, from + 4, 4);
    xl = temp[0];

    xl ^= pArray[17]; xr = Iterate(xl, xr, 17);
    xr ^= pArray[16]; xl = Iterate(xr, xl, 16);
    xl ^= pArray[15]; xr = Iterate(xl, xr, 15);
    xr ^= pArray[14]; xl = Iterate(xr, xl, 14);
    xl ^= pArray[13]; xr = Iterate(xl, xr, 13);
    xr ^= pArray[12]; xl = Iterate(xr, xl, 12);
    xl ^= pArray[11]; xr = Iterate(xl, xr, 11);
    xr ^= pArray[10]; xl = Iterate(xr, xl, 10);
    xl ^= pArray[9]; xr = Iterate(xl, xr, 9);
    xr ^= pArray[8]; xl = Iterate(xr, xl, 8);
    xl ^= pArray[7]; xr = Iterate(xl, xr, 7);
    xr ^= pArray[6]; xl = Iterate(xr, xl, 6);
    xl ^= pArray[5]; xr = Iterate(xl, xr, 5);
    xr ^= pArray[4]; xl = Iterate(xr, xl, 4);
    xl ^= pArray[3]; xr = Iterate(xl, xr, 3);
    xr ^= pArray[2]; xl = Iterate(xr, xl, 2);

    xl ^= pArray[1];
    xr ^= pArray[0];

    temp[0] = xl;
    ToBytes(dst, to, temp, 0, 4);
    temp[0] = xr;
    ToBytes(dst, to + 4, temp, 0, 4);
	}
}
